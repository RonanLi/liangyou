package com.liangyou.web.action;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONArray;import com.alibaba.fastjson.JSONObject;import com.liangyou.api.moneymoremore.*;import com.liangyou.context.Constant;import com.liangyou.context.Global;import com.liangyou.dao.AccountRechargeParamDao;import com.liangyou.dao.BorrowTenderDao;import com.liangyou.disruptor.DisruptorUtils;import com.liangyou.domain.*;import com.liangyou.exception.BussinessException;import com.liangyou.model.APIModel.AccountCashModel;import com.liangyou.model.APIModel.RechargeModel;import com.liangyou.model.BorrowParam;import com.liangyou.model.SearchParam;import com.liangyou.service.BorrowService;import com.liangyou.service.ExperienceMoneyService;import com.liangyou.service.PrizeUserRelationshipService;import com.liangyou.service.UserService;import com.liangyou.util.NumberUtils;import com.liangyou.util.StringUtils;import com.liangyou.yiqifa.api.advertiser.Sender;import org.apache.log4j.Logger;import org.apache.struts2.ServletActionContext;import org.apache.struts2.convention.annotation.Action;import org.apache.struts2.convention.annotation.Namespace;import org.apache.struts2.convention.annotation.ParentPackage;import org.apache.struts2.convention.annotation.Result;import org.springframework.beans.factory.annotation.Autowired;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import java.util.*;/** * 钱多多回调处理类，使用disruptor 前台回调和后台回调都处理业务,处理业务的时候进行判断 */@Namespace("/public/mmm")@ParentPackage("p2p-default")public class PublicMmmAction extends BaseAction {	private static final Logger logger = Logger.getLogger(PublicMmmAction.class);		@Autowired	private UserService userService;	@Autowired	private BorrowService borrowservice;	@Autowired	private BorrowTenderDao borrowTenderDao;	@Autowired	private PrizeUserRelationshipService prizeUserRelationshipService;	@Autowired	private ExperienceMoneyService experienceMoneyService;	@Autowired	private AccountRechargeParamDao accountRechargeParamDao;	/**	 * 提现页面回调	 *	 * @return	 */	@Action(value = "cashReturn")	public String cashReturn() throws Exception {		logger.info("取现页面回调!");		BorrowParam param = new BorrowParam();		String resultFlag = System.currentTimeMillis() + "";		param.setResultFlag(resultFlag);		// add by gy 2016年11月29日12:34:50		// 增加wap端的访问判断		if (isWap()) {			param.setWap(true);			dealMmmCash(param);			response.sendRedirect(Global.getString("webAppUrl") + "/wap/Innerpage.html?resultFlag=" + resultFlag);			return null;		}		// end		dealMmmCash(param);		request.setAttribute("tenderFlag", resultFlag);		request.setAttribute("ok_url", "/member/main.html"); // 成功返回地址		request.setAttribute("back_url", "/member/main.html");// 失败返回地址		request.setAttribute("r_msg", "取现成功,等待银行处理");		return RESULT;	}	/**	 * 提现后台回调	 *	 * @return	 */	@Action(value = "cashNotify")	public String cashNotify() {		logger.info("取现后台回调!");		dealMmmCash(new BorrowParam());		printSuccess();		return null;	}	/**	 * 提现处理	 *	 * @param param	 */	private void dealMmmCash(BorrowParam param) {		MmmCash mmmCash = this.cashCall();		boolean verifySignature = mmmCash.successSign();		if (mmmCash.getResultCode().equals("88") || mmmCash.getResultCode().equals("89") || mmmCash.getResultCode().equals("90")) {			// 回调状态码为 88, 89,90 的都进入处理方法			if (verifySignature) {				logger.info("取现双乾处理成功，进入本地处理：" + mmmCash.getOrderNo());				AccountCashModel cashModel = new AccountCashModel();// 封装取现共用bean				cashModel.setCardNo(mmmCash.getCardNo());				cashModel.setOrderId(mmmCash.getOrderNo());				cashModel.setOrderAmount(mmmCash.getAmount());				cashModel.setLoanNo(mmmCash.getLoanNo());				cashModel.setParam(getRequestParams());				// cashModel.setFeeAmt(NumberUtils.getDouble(mmmCash.getFee()));//平台承担的手续费金额				cashModel.setServFee(NumberUtils.getDouble(mmmCash.getFeeWithdraws()));// 用户承担的手续费金额				param.setResultCode(mmmCash.getResultCode());				try {					DisruptorUtils.doMmmVerifyCashBackTask(param, cashModel);				} catch (Exception e) {					logger.error(e);					logger.error("取现失败：" + e);				}			} else {				logger.info("取现验签失败，订单号：" + mmmCash.getOrderNo());				// add by gy 2016-11-28 10:30:13				// 这里增加wap端请求的判断。				if (isWap()) {					if (param != null && param.getResultFlag() != null) {						// 在需要保存系统处理信息的地方直接保存进来						Global.RESULT_MAP.put(param.getResultFlag(), "取现参数异常");					}				} else {					throw new BussinessException("取现参数异常", "/member/index.html");				}				// end			}		} else {			// add by gy 2016-11-28 10:30:13			// 这里增加wap端请求的判断。			if (isWap()) {				if (param != null && param.getResultFlag() != null) {					// 在需要保存系统处理信息的地方直接保存进来					Global.RESULT_MAP.put(param.getResultFlag(), MmmResultCode.getResult(mmmCash.getResultCode(), "cash"));				}			} else {				throw new BussinessException(MmmResultCode.getResult(mmmCash.getResultCode(), "cash"), "/member/index.html");			}			// end		}	}	/**	 * 取现补单	 * add by gy 2016-11-15 11:47:36 begin	 *	 * @param param	 */	@Action(value = "doCashNotify")	public String doCashNotify() {		BorrowParam param = new BorrowParam();		String resultFlag = System.currentTimeMillis() + "";		param.setResultFlag(resultFlag);		String str = paramString("param");		logger.info(str);		JSONObject jo = JSON.parseObject(str);		MmmCash mmmCash = cashCall(jo);		boolean verifySignature = mmmCash.successSign();		if (mmmCash.getResultCode().equals("88") || mmmCash.getResultCode().equals("89") || mmmCash.getResultCode().equals("90")) {			// 回调状态码为 88, 89,90 的都进入处理方法			if (verifySignature) {				logger.info("补单处理开始：" + mmmCash.getOrderNo());				AccountCashModel cashModel = new AccountCashModel();// 封装取现共用bean				cashModel.setCardNo(mmmCash.getCardNo());				cashModel.setOrderId(mmmCash.getOrderNo());				cashModel.setOrderAmount(mmmCash.getAmount());				cashModel.setLoanNo(mmmCash.getLoanNo());				cashModel.setParam(getRequestParams());				cashModel.setServFee(NumberUtils.getDouble(mmmCash.getFeeWithdraws()));// 用户承担的手续费金额				param.setResultCode(mmmCash.getResultCode());				try {					DisruptorUtils.doMmmVerifyCashBackTask(param, cashModel);				} catch (Exception e) {					logger.error(e);					logger.error("取现失败：" + e);				}			} else {				logger.info("取现验签失败，订单号：" + mmmCash.getOrderNo());				throw new BussinessException("取现参数异常", "/member/index.html");			}		} else {			throw new BussinessException(MmmResultCode.getResult(mmmCash.getResultCode(), "cash"), "/member/index.html");		}		request.setAttribute("tenderFlag", resultFlag);		request.setAttribute("ok_url", "/admin/account/makeUpOrder.html"); // 成功返回地址		request.setAttribute("back_url", "/admin/account/makeUpOrder.html");// 失败返回地址		request.setAttribute("r_msg", "提现补单成功,等待银行处理");		return ADMINRESULT;	}	// end	/**	 * 开户页面回调	 *	 * @return	 */	@Action(value = "registerReturn")	public String registerReturn() {		logger.info("注册开户页面回调！");		String resultFlag = System.currentTimeMillis() + "";		try {			BorrowParam param = new BorrowParam();			param.setResultFlag(resultFlag);			// add by gy 2016年11月28日13:41:37			// 增加wap端访问的判断			if (isWap()) {				MmmRegister mmmReg = this.registerCall();				boolean verifySignature = mmmReg.successSign();// RSA 数据签名验证 （TRUE:验证成功；FALSE:验证失败）				if (!verifySignature) {					Global.RESULT_MAP.put(resultFlag, MmmResultCode.getResult(mmmReg.getResultCode(), "register"));					response.sendRedirect(Global.getString("webAppUrl") + "/wap/Innerpage.html?router=oPtions&subRouter=realnameauth&resultFlag=" + resultFlag);					return null;				}				if (mmmReg.getResultCode().equals("88") || mmmReg.getResultCode().equals("89")) { // 89返回码为提示平台姓名匹配扣费用， 不做用户实名提示。					User user = userService.getUserByNameEmailPhone(mmmReg.getLoanPlatformAccount());					user.setApiId(mmmReg.getMoneymoremoreId());					user.setApiUsercustId(mmmReg.getAccountNumber());					try {						param.setWap(true);						DisruptorUtils.apiUserRegister(user, param);// 调用异步处理					} catch (Exception e) {						logger.error("开户失败：" + e);					}					response.sendRedirect(Global.getString("webAppUrl") + "/wap/Innerpage.html?router=oPtions&subRouter=realnameauth&resultFlag=" + resultFlag);					return null;				} else {					Global.RESULT_MAP.put(resultFlag, MmmResultCode.getResult(mmmReg.getResultCode(), "register"));					response.sendRedirect(Global.getString("webAppUrl") + "/wap/Innerpage.html?router=oPtions&subRouter=realnameauth&resultFlag=" + resultFlag);					return null;				}			} else {				dealMmmRegister(param);				request.setAttribute("tenderFlag", resultFlag);				request.setAttribute("ok_url", "/member/apiRealname.html?authcallback"); // 成功返回地址				request.setAttribute("back_url", "/member/apiRealname.html?authcallback");// 失败返回地址				request.setAttribute("r_msg", "开户成功");				return RESULT;			}		} catch (Exception e) {			logger.info("开户失败的原因：" + e.getMessage());			Global.RESULT_MAP.put(resultFlag, e.getMessage());			request.setAttribute("tenderFlag", resultFlag);			request.setAttribute("ok_url", "/member/apiRealname.html?authcallback"); // 成功返回地址			request.setAttribute("back_url", "/member/apiRealname.html?authcallback");// 失败返回地址			request.setAttribute("r_msg", "开户失败");			return RESULT;		}		// end	}	/**	 * 开户后台回调	 *	 * @return	 */	@Action(value = "registerNotify")	public String registerNotify() {		logger.info("注册开户后台回调！");		dealMmmRegister(null);		printSuccess();		return null;	}	/**	 * 开户处理	 *	 * @param param	 */	private void dealMmmRegister(BorrowParam param) {		MmmRegister mmmReg = this.registerCall();		checkSign(mmmReg, "register");  		User user = userService.getUserByNameEmailPhone(mmmReg.getLoanPlatformAccount());		user.setApiId(mmmReg.getMoneymoremoreId());		user.setApiUsercustId(mmmReg.getAccountNumber());		try {			DisruptorUtils.apiUserRegister(user, param);// 调用异步处理		} catch (Exception e) {			logger.error(e);			logger.error("开户失败：" + e);		}	}		/**	 * 开户补单	 * add by gy 2016-11-15 11:47:36 begin	 *	 * @param param	 */	@Action(value = "doRegisterNotify")	public String doRegisterNotify() {		BorrowParam param = new BorrowParam();		String resultFlag = System.currentTimeMillis() + "";		param.setResultFlag(resultFlag);		String str = paramString("param");		logger.info(str);		JSONObject jo = JSON.parseObject(str);		MmmRegister mmmReg = this.registerCall(jo);		checkSign(mmmReg, "register");		User user = userService.getUserByNameEmailPhone(mmmReg.getLoanPlatformAccount());		user.setApiId(mmmReg.getMoneymoremoreId());		user.setApiUsercustId(mmmReg.getAccountNumber());		try {			DisruptorUtils.apiUserRegister(user, param);// 调用异步处理		} catch (Exception e) {			logger.error(e);			logger.error("开户失败：" + e);		}		request.setAttribute("tenderFlag", resultFlag);		request.setAttribute("ok_url", "/admin/account/makeUpOrder.html"); // 成功返回地址		request.setAttribute("back_url", "/admin/account/makeUpOrder.html");// 失败返回地址		request.setAttribute("r_msg", "开户补单成功,等待银行处理");		return ADMINRESULT;	}	// end	/**	 * 授权页面回调	 *	 * @return	 */	@Action(value = "loanAuthorizeReturn")	public String loanAuthorizeReturn() throws Exception {		BorrowParam param = new BorrowParam();		String resultFlag = System.currentTimeMillis() + "";		param.setResultFlag(resultFlag);		// add by gy 2016年11月29日12:34:50		// 增加wap端的访问判断		if (isWap()) {			param.setWap(true);			dealLoanAuthorize(param);			MmmLoanAuthorize mmm = this.loanAuthorizeCall();			if (!StringUtils.isBlank(mmm.getRemark1()) && mmm.getResultCode().equals("88")) {				Borrow b = borrowservice.getBorrow(Long.parseLong(mmm.getRemark1()));				response.sendRedirect(Global.getString("webAppUrl") + "/wap/bid_details.html?id=" + mmm.getRemark1());				return null;			}			response.sendRedirect(Global.getString("webAppUrl") + "/wap/Innerpage.html?resultFlag=" + resultFlag);			return null;		}		// end		dealLoanAuthorize(param);		request.setAttribute("tenderFlag", resultFlag);		request.setAttribute("ok_url", "/member/main.html"); // 成功返回地址		request.setAttribute("back_url", "/member/main.html");// 失败返回地址		request.setAttribute("r_msg", "授权成功");		return RESULT;	}	/**	 * 授权还款后台回调	 *	 * @return	 */	@Action(value = "loanAuthorizeNotify")	public String loanAuthorizeNotify() {		dealLoanAuthorize(null);		printSuccess();		return null;	}	private void dealLoanAuthorize(BorrowParam param) {		MmmLoanAuthorize mmm = this.loanAuthorizeCall();		checkSign(mmm, "loanAuthorize");		User user = userService.getUserByApiId(mmm.getMoneymoremoreId());		try {			DisruptorUtils.apiUserActivate(user, param);// 调用异步处理		} catch (Exception e) {			logger.error(e);			logger.error("授权失败：" + e);		}	}	/**	 * 充值前台回调	 *	 * @return	 */	@Action(value = "rechargeReturn")	public String rechargeReturn() {		String resultFlag = System.currentTimeMillis() + "";		try {			logger.info("充值前台回调！");			BorrowParam param = new BorrowParam();			param.setResultFlag(resultFlag);			// add by gy 2016年11月29日12:34:50			// 增加wap端的访问判断			logger.info("充值是否为wap端访问：" + isWap());			if (isWap()) {				param.setWap(true);				dealMmmRecharge(param);				logger.info("移动端充值成功后跳转：" + Global.getString("webAppUrl") + "/wap/Innerpage.html?resultFlag=" + resultFlag );				response.sendRedirect(Global.getString("webAppUrl") + "/wap/Innerpage.html?resultFlag=" + resultFlag);				return null;			}			// end			dealMmmRecharge(param);			request.setAttribute("tenderFlag", resultFlag);			request.setAttribute("ok_url", "/member/main.html"); // 成功返回地址			request.setAttribute("back_url", "/member/main.html");// 失败返回地址			request.setAttribute("r_msg", "充值成功");			return RESULT;		} catch (Exception e) {			e.printStackTrace();			logger.info("充值异常信息：" + e.getMessage());			if (isWap()) {				logger.info("移动端充值失败后跳转：" + Global.getString("webAppUrl") + "/wap/Innerpage.html?resultFlag=" + resultFlag );				try {					Global.RESULT_MAP.put(resultFlag, "充值失败：" + e.getMessage());					response.sendRedirect(Global.getString("webAppUrl") + "/wap/Innerpage.html?resultFlag=" + resultFlag);				} catch (IOException el) {					el.printStackTrace();				}			}		}		return null;	}	/**	 * 充值后台回调	 *	 * @return	 */	@Action(value = "rechargeNotify")	public String rechargeNotify() {		logger.info("充值后台回调！");		dealMmmRecharge(null);		printSuccess();		return null;	}	/**	 * 处理充值	 *	 * @param param	 */	private void dealMmmRecharge(BorrowParam param) {		MmmRecharge mmmReg = this.rechargeCall();// 充值返回参数		checkSign(mmmReg, "recharge");// 回调验签		// (充值方ID~类型~被充值方ID~时间~IP)		AccountLog log = new AccountLog(1L, Constant.RECHARGE, 1L, getTimeStr(), getRequestIp());		String orderNo = mmmReg.getOrderNo(); // 订单号		logger.info("订单号：" + mmmReg.getOrderNo() + " 金额：" + mmmReg.getAmount() + " 结果：" + mmmReg.getResultCode() + " 流水号：" + mmmReg.getLoanNo());		log.setRemark("网上充值," + Global.getValue("api_name") + "充值,订单号:" + orderNo);		try {			if (orderNo != null) {// 如果订单号不为空				// log.setRemark(getRequestParams());// 返回的参数包含 进去				RechargeModel reModel = new RechargeModel(); // 对通用javabean进行参数封装，第三方托管充值后，本地处理业务逻辑所需要使用到的参数封装bean				reModel.setOrderAmount(mmmReg.getAmount());// 充值金额				reModel.setOrderId(mmmReg.getOrderNo());// 充值订单号				reModel.setResultMsg(mmmReg.getMessage());// 充值失败的时候返回信息				reModel.setCode(mmmReg.getResultCode());// 第三方返回码				String code = mmmReg.getResultCode(); // 返回码 88表示成功				reModel.setReturnParam(getRequestParams());// 返回的参数包含 进去（回调参数封装）				if ("88".equals(code) || "90".equals(code) || "91".equals(code)) {					reModel.setResult("true");// 第三方处理结果				} else {					reModel.setResult("false");// 第三方处理结果				}				reModel.setRechargeType(NumberUtils.getInt(mmmReg.getRechargeType()));// 充值方式 ：3：无卡代充值				// reModel.setResultMsg(mmmReg.getResultCode());				// reModel.setResult("true");				reModel.setSerialNo(mmmReg.getLoanNo());// 充值流水号				DisruptorUtils.doRechargeBackTask(reModel, log, param);			} else {				if (param != null && param.getResultFlag() != null) {					// 在需要保存系统处理信息的地方直接保存进来					Global.RESULT_MAP.put(param.getResultFlag(), Global.getValue("api_name") + "充值 回调返回订单为空:" + orderNo);				}				logger.info("**********" + Global.getValue("api_name") + "充值 回调返回订单为空:" + orderNo);			}		} catch (Exception e) {			if (param != null && param.getResultFlag() != null) {				// 在需要保存系统处理信息的地方直接保存进来				Global.RESULT_MAP.put(param.getResultFlag(), "充值失败!");			}			logger.error("充值失败：" + orderNo + "   " + e);		}	}	/**	 * 充值补单	 * add by gy 2016-11-15 11:47:36 begin	 *	 * @param param	 */	@Action(value = "doRechargeNotify")	public String doRechargeNotify() {		BorrowParam param = new BorrowParam();		String resultFlag = System.currentTimeMillis() + "";		param.setResultFlag(resultFlag);		String str = paramString("param");		logger.info(str);		JSONObject jo = JSON.parseObject(str);		MmmRecharge mmmReg = this.rechargeCall(jo);// 充值返回参数		checkSign(mmmReg, "recharge");// 回调验签		// (充值方ID~类型~被充值方ID~时间~IP)		AccountLog log = new AccountLog(1L, Constant.RECHARGE, 1L, getTimeStr(), getRequestIp());		String orderNo = mmmReg.getOrderNo(); // 订单号		logger.info("订单号：" + mmmReg.getOrderNo() + " 金额：" + mmmReg.getAmount() + " 结果：" + mmmReg.getResultCode() + " 流水号：" + mmmReg.getLoanNo());		log.setRemark("网上充值," + Global.getValue("api_name") + "充值,订单号:" + orderNo);		try {			if (orderNo != null) {// 如果订单号不为空				// log.setRemark(getRequestParams());// 返回的参数包含 进去				RechargeModel reModel = new RechargeModel(); // 对通用javabean进行参数封装，第三方托管充值后，本地处理业务逻辑所需要使用到的参数封装bean				reModel.setOrderAmount(mmmReg.getAmount());// 充值金额				reModel.setOrderId(mmmReg.getOrderNo());// 充值订单号				reModel.setResultMsg(mmmReg.getMessage());// 充值失败的时候返回信息				reModel.setCode(mmmReg.getResultCode());// 第三方返回码				String code = mmmReg.getResultCode(); // 返回码 88表示成功				reModel.setReturnParam(getRequestParams());// 返回的参数包含 进去（回调参数封装）				if ("88".equals(code) || "90".equals(code) || "91".equals(code)) {					reModel.setResult("true");// 第三方处理结果				} else {					reModel.setResult("false");// 第三方处理结果				}				reModel.setRechargeType(NumberUtils.getInt(mmmReg.getRechargeType()));// 充值方式 ：3：无卡代充值				// reModel.setResultMsg(mmmReg.getResultCode());				// reModel.setResult("true");				reModel.setSerialNo(mmmReg.getLoanNo());// 充值流水号				DisruptorUtils.doRechargeBackTask(reModel, log, param);			} else {				logger.info("**********" + Global.getValue("api_name") + "充值 回调返回订单为空:" + orderNo);			}		} catch (Exception e) {			logger.error(e);			logger.error("充值失败：" + orderNo + "   " + e);		}		request.setAttribute("tenderFlag", resultFlag);		request.setAttribute("ok_url", "/admin/account/makeUpOrder.html"); // 成功返回地址		request.setAttribute("back_url", "/admin/account/makeUpOrder.html");// 失败返回地址		request.setAttribute("r_msg", "充值补单成功！");		return ADMINRESULT;	}	// end	/**	 * 投标页面回调	 *	 * @return	 */	@Action(value = "tenderReturn", results = {@Result(name = "ReceivePrizeSuccess", type = "ftl", location = "/award.html")})	public String tenderReturn() throws Exception {		logger.info("投标页面回调开始！！！");		BorrowParam param = new BorrowParam();		String resultFlag = System.currentTimeMillis() + "";// 获取系统时间		param.setResultFlag(resultFlag);// 投标专用		// add by gy 2016年11月29日12:34:50		// 增加wap端的访问判断		logger.info("投标是否为wap端访问：" + isWap());		if (isWap()) {			param.setWap(true);			dealTender(param);			logger.info("移动端投标成功后跳转：" + Global.getString("webAppUrl") + "/wap/Innerpage.html?resultFlag=" + resultFlag );			response.sendRedirect(Global.getString("webAppUrl") + "/wap/Innerpage.html?resultFlag=" + resultFlag);			return null;		}		// end		dealTender(param);		request.setAttribute("tenderFlag", resultFlag);		request.setAttribute("ok_url", "/member/main.html"); // 成功返回地址		request.setAttribute("back_url", "/member/main.html");// 失败返回地址		request.setAttribute("r_msg", "投标成功");		// edit by gy 2016-10-26 13:36:39 增加转盘抽奖活动是否开启参数。 判断投标成功，是否跳转抽奖页面		if (isEnableLottery()) {			User user = getSessionUser();			SearchParam params = new SearchParam();			params.addParam("user", user);			params.addParam("receiveState", 1);			List<PrizeUserRelationship> purList = this.prizeUserRelationshipService.findByParam(params);			logger.info("投标完成查询用户是否存在未领取的投标奖品：" + purList);			if (!purList.isEmpty()) {				request.setAttribute("interfaceFlag", 1);				request.setAttribute("purId", purList.get(0).getId());				request.setAttribute("userId", user.getUserId());				MmmLoanTransfer loan = loanCall();				logger.info("投标完成查询用户是否存在未领取的投标奖品查询转账接口回调信息：" + loan.toString());				checkSign(loan, "loan");				LoanJson loanJson = loan.getLoanList().get(0);				request.setAttribute("money", loanJson.getAmount());				return "ReceivePrizeSuccess";			}		}		return RESULT;	}	/**	 * 投标后台回调	 *	 * @return	 */	@Action(value = "tenderNotify")	public String tenderNotify() {		BorrowParam param = new BorrowParam();		logger.info("投标后台回调开始！！！");		MmmLoanTransfer loan = loanCall();// 转账接口回调信息类		dealTender(param);		printSuccess();		return null;	}	/**	 * 投标处理	 *	 * @param param	 */	private void dealTender(BorrowParam param) {		MmmLoanTransfer loan = loanCall();// 转账接口回调信息类		checkSign(loan, "loan");		// edit by gy 2016-10-26 17:07:34，由于请求的转账list顺序可能有变化，所以这里根据remark字段来区分哪一条为从客户账户中转账		LoanJson loanJson = new LoanJson(); // loan.getLoanList().get(0);		double amount = 0.00;		for (LoanJson lj : loan.getLoanList()) {			amount += NumberUtils.getDouble2(lj.getAmount()); // 这里的本金，即转账金额需要将list中的所有金额都加起来			if (lj.getRemark().equals("投标")) {				loanJson = lj;			} else if (lj.getRemark().equals("体验金利息抵扣投标本金")) {				param.setEmLoanNo(lj.getLoanNo());				param.setEmTenderNo(lj.getOrderNo());			}		}		// 增加体验金使用标识字段		if (!StringUtils.isBlank(loan.getRemark1())) {			param.setExperienceMoney(experienceMoneyService.getExperenceMoney(SearchParam.getInstance().addParam("id", Long.parseLong(loan.getRemark1()))));		}		// eidt by gy 2016-10-26 17:09:53 end		param.setId(NumberUtils.getLong(loanJson.getBatchNo()));		// param.setMoney(NumberUtils.getDouble2(loanJson.getAmount()));//转账金额		param.setMoney(amount);// 转账金额 edit by gy 2016-10-26 17:10:12 修改转账金额为list的金额累加		param.setTenderNo(loanJson.getOrderNo());// 汇付接口专用，用户保存投标回调保存订单号		param.setLoanNo(loanJson.getLoanNo());// 双乾转账订单号		param.setIp(getRequestIp());		User user = userService.getUserByApiId(loanJson.getLoanOutMoneymoremore());		logger.info("投标回调装配参数结束： OrderNo：" + loanJson.getOrderNo() + ", amount：" + amount + ", LoanNo： " + loanJson.getLoanNo() + ", borrow_id ：" + loanJson.getBatchNo());		try {			DisruptorUtils.mmmTender(param, user);// 接口：双乾投标			if (isOnlineConfig() && isEnableYQFPromotion()) { // 线上环境并且启用了亿起发推送功能				Borrow borrow = this.borrowservice.getBorrow(param.getId());// 借款标的信息，不含借款人的信息				List<BorrowTender> btList = this.borrowTenderDao.getBorrowTenderByOrderNo(loanJson.getOrderNo());				BorrowTender bt = new BorrowTender();				if (!btList.isEmpty()) {					bt = btList.get(0);				}				Sender sender = new Sender();				Map<String, Object> resultMap = sender.sendOrder(borrow, bt, request);				if (!resultMap.isEmpty()) {					if (Sender.SEND_STATUS_SUCCESS == Integer.parseInt(String.valueOf(resultMap.get("resultCode")))) {						// 推送成功，存cid aid feeback						bt.setYqfCpsCampaignId(String.valueOf(resultMap.get("cid")));						bt.setYqfCpsAid(String.valueOf(resultMap.get("aid")));						bt.setYqfCpsFeedback(String.valueOf(resultMap.get("feedback")));						bt.setYqfCpsTarget(String.valueOf(resultMap.get("target")));						bt.setYqfCpsChannel(String.valueOf(resultMap.get("channel")));						logger.debug("需要更新的bt：btid：" + bt.getId() + ", aid：" + bt.getYqfCpsAid() + ", cid：" + bt.getYqfCpsCampaignId() + ", feedback: " + bt.getYqfCpsFeedback() + ", target：" + bt.getYqfCpsTarget() + ", channel：" + bt.getYqfCpsChannel());						borrowTenderDao.updateBT(bt.getId(), bt.getYqfCpsAid(), bt.getYqfCpsCampaignId(), bt.getYqfCpsFeedback(), bt.getYqfCpsTarget(), bt.getYqfCpsChannel());					}				}			}		} catch (Exception e) {			e.printStackTrace();			if (param != null && param.getResultFlag() != null) {				// 在需要保存系统处理信息的地方直接保存进来				Global.RESULT_MAP.put(param.getResultFlag(), "投标失败!");			}			logger.error("投标失败  OrderNo:" + loanJson.getOrderNo() + "  LoanNo: " + loanJson.getLoanNo() + e);		}	}	/**	 * 投标补单	 * add by gy begin	 *	 * @return	 */	@Action(value = "doTenderNotify")	public String doTenderNotify() {		String str = paramString("param");		logger.info(str);		JSONObject jo = JSON.parseObject(str);		MmmLoanTransfer loan = loanCall(jo);// 转账接口回调信息类		checkSign(loan, "loan");		// edit by gy 2016-10-26 17:07:34，由于请求的转账list顺序可能有变化，所以这里根据remark字段来区分哪一条为从客户账户中转账		LoanJson loanJson = new LoanJson(); // loan.getLoanList().get(0);		BorrowParam param = new BorrowParam();		String resultFlag = System.currentTimeMillis() + "";		param.setResultFlag(resultFlag);		double amount = 0.00;		for (LoanJson lj : loan.getLoanList()) {			amount += NumberUtils.getDouble2(lj.getAmount()); // 这里的本金，即转账金额需要将list中的所有金额都加起来			if (lj.getRemark().equals("投标")) {				loanJson = lj;			} else if (lj.getRemark().equals("体验金利息抵扣投标本金")) {				param.setEmLoanNo(lj.getLoanNo());				param.setEmTenderNo(lj.getOrderNo());			}		}		// 增加体验金使用标识字段		if (!StringUtils.isBlank(loan.getRemark1())) {			param.setExperienceMoney(experienceMoneyService.getExperenceMoney(SearchParam.getInstance().addParam("id", Long.parseLong(loan.getRemark1()))));		}		// eidt by gy 2016-10-26 17:09:53 end		param.setId(NumberUtils.getLong(loanJson.getBatchNo()));		// param.setMoney(NumberUtils.getDouble2(loanJson.getAmount()));//转账金额		param.setMoney(amount);// 转账金额 edit by gy 2016-10-26 17:10:12 修改转账金额为list的金额累加		param.setTenderNo(loanJson.getOrderNo());// 汇付接口专用，用户保存投标回调保存订单号		param.setLoanNo(loanJson.getLoanNo());// 双乾转账订单号		param.setIp(getRequestIp());		User user = userService.getUserByApiId(loanJson.getLoanOutMoneymoremore());		logger.info("投标回调装配参数结束： OrderNo：" + loanJson.getOrderNo() + ", amount：" + amount + ", LoanNo： " + loanJson.getLoanNo() + ", borrow_id ：" + loanJson.getBatchNo());		try {			DisruptorUtils.mmmTender(param, user);// 接口：双乾投标		} catch (Exception e) {			e.printStackTrace();			logger.error(e);			logger.error("投标补单失败  OrderNo:" + loanJson.getOrderNo() + "  LoanNo: " + loanJson.getLoanNo() + e);		}		request.setAttribute("tenderFlag", resultFlag);		request.setAttribute("ok_url", "/admin/account/makeUpOrder.html"); // 成功返回地址		request.setAttribute("back_url", "/admin/account/makeUpOrder.html");// 失败返回地址		request.setAttribute("r_msg", "投标补单成功！");		return ADMINRESULT;	}	// end	// 转账前台回调	@Action(value = "loanTransferAuditReturn")	public String loanTransferAuditReturn() {		return MSG;	}	//转账后台回调  modify by lijing	@Action(value = "notifyPrintSuccess")	public String notifyPrintSuccess() {		printSuccess();		return null;	}	//批量充值后台回调 add by lijing 	@Action("batchReachargeNotify")	public String batchReachargeNotify() {		//转账回调,数据加密信息		logger.info("批量转账后台回调开始");		dealBatchReacharge();		printSuccess();		return null;	}	private void dealBatchReacharge() {		//批量充值回调,需要双乾流水号作为审核的唯一标识处理后续业务  需要返回两次结果第一次没有accountRecharge数据		MmmLoanTransfer mmmLoanTransfer = loanCall();		try {			checkSign(mmmLoanTransfer, "loan"); //如果存在重复转账异常,会中断		} catch (Exception e) {			//防止终止后续操作			e.printStackTrace();		}		if("4".equals(mmmLoanTransfer.getRemark1())){			List<LoanJson> loanList = mmmLoanTransfer.getLoanList();			for (LoanJson loanJson : loanList) {				if("后台批量充值".equals(loanJson.getRemark())){					logger.info("后台批量充值回调参数处理,双乾流水号:"+loanJson.getLoanNo());					int arId = NumberUtils.getInt(loanJson.getBatchNo());					logger.info("返回充值id:"+arId);					AccountRechargeParam arp = new AccountRechargeParam();					arp.setAddtime(new Date());					arp.setRechargeId(arId);					arp.setSerialno(loanJson.getLoanNo());					arp.setOrderno(loanJson.getOrderNo());					accountRechargeParamDao.save(arp);				}			}		}	}	/**	 * 转账回调打印success	 *	 * @return	 */	@Action(value = "loanTransferAuditReturn")	public String loanNotify() {		MmmLoanTransfer mmm = loanCall();		checkSign(mmm, "loan");		printSuccess();		return null;	}	/**	 * 认证、提现银行卡绑定、代扣授权三合一接口页面回调	 *	 * @return	 */	@Action(value = "loanfastpayReturn")	public String loanfastpayReturn() {		BorrowParam param = new BorrowParam();		String resultFlag = System.currentTimeMillis() + "";		param.setResultFlag(resultFlag);		String s = getRequestParams();		logger.debug("三合一页面回调：" + s);		request.setAttribute("tenderFlag", resultFlag);		request.setAttribute("ok_url", "/member/main.html"); // 成功返回地址		request.setAttribute("back_url", "/member/main.html");// 失败返回地址		request.setAttribute("r_msg", "三合一认证成功");		dealMmmToLoanFastPay(param);		return RESULT;	}	/**	 * 认证、提现银行卡绑定、代扣授权三合一接口后台回调	 *	 * @return	 */	@Action(value = "loanfastpayNotify")	public String loanfastpayNotify() {		dealMmmToLoanFastPay(new BorrowParam());		printSuccess();		return null;	}	/**	 * 认证、提现银行卡绑定、代扣授权三合一接口处理	 *	 * @param param	 */	private void dealMmmToLoanFastPay(BorrowParam param) {		MmmToLoanFastPay mmm = this.loanFastPayCall();		checkSign(mmm, "loanFastPay");		User user = userService.getUserByApiId(mmm.getMoneymoremoreId());		try {			if (mmm.getAction().equals("1")) {				DisruptorUtils.apiLoanFastPay(user, param, mmm, "apiLoanFastPay");// 调用异步处理实名认证			} else if (mmm.getAction().equals("2")) {				DisruptorUtils.apiLoanFastPay(user, param, mmm, "mmmBindingCard");// 调用异步处理绑卡			} else if (mmm.getAction().equals("3")) {				DisruptorUtils.apiLoanFastPay(user, param, mmm, "mmmwWthhold");// 调用异步处理代扣			} else {				throw new BussinessException("页面处理异常,请联系技术处理！");			}		} catch (Exception e) {			logger.error(e);			logger.error("三合一认证失败：" + e);		}	}	/**	 * 认证、提现银行卡绑定、代扣授权三合一接口参数处理	 *	 * @return	 */	private MmmToLoanFastPay loanFastPayCall() {		MmmToLoanFastPay mmm = new MmmToLoanFastPay(0);		mmm.setMoneymoremoreId(paramString("MoneymoremoreId"));		mmm.setPlatformMoneymoremore(paramString("PlatformMoneymoremore"));		mmm.setAction(paramString("Action"));		mmm.setBankCode(paramString("BankCode"));		mmm.setCardNo(mmm.decryptData(paramString("CardNo")));		mmm.setBranchBankName(paramString("BranchBankName"));		mmm.setProvince(paramString("Province"));		mmm.setCity(paramString("City"));		mmm.setWithholdBeginDate(paramString("WithholdBeginDate"));		mmm.setWithholdEndDate(paramString("WithholdEndDate"));		mmm.setSingleWithholdLimit(paramString("SingleWithholdLimit"));		mmm.setTotalWithholdLimit(paramString("TotalWithholdLimit"));		mmm.setRandomTimeStamp(paramString("RandomTimeStamp"));		mmm.setRemark1(paramString("Remark1"));		mmm.setRemark2(paramString("Remark2"));		mmm.setRemark3(paramString("Remark3"));		mmm.setResultCode(paramString("ResultCode"));		mmm.setSignInfo(paramString("SignInfo"));		return mmm;	}	/**	 * 投标（转账）参数处理	 *	 * @return	 */	private MmmLoanTransfer loanCall() {		logger.info("投标回调解析参数开始！" + getRequestParamsToJSON());		MmmLoanTransfer mmmLoan = new MmmLoanTransfer(3);		mmmLoan.setRemark1(paramString("Remark1"));		mmmLoan.setResultCode(paramString("ResultCode"));// 返回码 88表示成功		mmmLoan.setPlatformMoneymoremore(paramString("PlatformMoneymoremore"));// 开通乾多多帐号为平台帐号时生成，以p开头		mmmLoan.setAction(paramString("Action"));// 1.手动转账 2.自动转账		String LoanJsonListStr = StringUtils.UrlDecoder(paramString("LoanJsonList"));// 转账列表		mmmLoan.setLoanJsonList(LoanJsonListStr);		JSONArray loanListjson = JSON.parseArray(LoanJsonListStr);		List<LoanJson> loanList = new ArrayList<LoanJson>();// 转账列表		if (loanListjson != null) {// 如果转账列表不为空			for (int i = 0; i < loanListjson.size(); i++) {				JSONObject object = loanListjson.getJSONObject(i);				LoanJson loan = new LoanJson();// 转账列表类				loan.setLoanOutMoneymoremore(object.getString("LoanOutMoneymoremore"));// 付款人乾多多标识				loan.setLoanInMoneymoremore(object.getString("LoanInMoneymoremore"));// 收款人乾多多标识				loan.setLoanNo(object.getString("LoanNo"));// 乾多多流水号				loan.setOrderNo(object.getString("OrderNo"));// 网贷平台订单号				loan.setAmount(object.getString("Amount"));// 金额				loan.setBatchNo(object.getString("BatchNo"));// 网贷平台标号				loan.setTransferName(object.getString("TransferName"));// 用途				loan.setRemark(object.getString("Remark"));// 备注				JSONArray secondListjson = JSON.parseArray(object.getString("SecondaryJsonList"));				List<SecondaryJson> secondList = new ArrayList<SecondaryJson>();// 转账二次分配列表				if (secondListjson != null) {					for (int n = 0; n < secondListjson.size(); n++) {						JSONObject secondObject = loanListjson.getJSONObject(n);						SecondaryJson secondJson = new SecondaryJson();						secondJson.setLoanInMoneymoremore(secondObject.getString("LoanInMoneymoremore"));// 收款人乾多多标识						secondJson.setAmount(secondObject.getString("Amount"));// 金额						secondJson.setTransferName(secondObject.getString("TransferName"));// 用途						secondJson.setRemark(secondObject.getString("Remark"));// 备注						secondList.add(secondJson);					}					loan.setSecondaryList(secondList);				}				loanList.add(loan);			}		}		mmmLoan.setLoanList(loanList);		mmmLoan.setSignInfo(paramString("SignInfo"));// 签名参数		logger.info("投标回调解析参数完毕：" + mmmLoan.toString());		return mmmLoan;	}	/**	 * 投资补单调用参数	 * add by gy 2016年11月15日11:49:02 begin	 *	 * @param jo	 * @return	 */	private MmmLoanTransfer loanCall(JSONObject jo) {		logger.info("补单参数开始！" + JSON.toJSONString(jo));		MmmLoanTransfer mmmLoan = new MmmLoanTransfer(3);		mmmLoan.setRemark1(jo.getString("Remark1"));		mmmLoan.setResultCode(jo.getString("ResultCode"));// 返回码 88表示成功		mmmLoan.setPlatformMoneymoremore(jo.getString("PlatformMoneymoremore"));// 开通乾多多帐号为平台帐号时生成，以p开头		mmmLoan.setAction(jo.getString("Action"));// 1.手动转账 2.自动转账		String LoanJsonListStr = StringUtils.UrlDecoder(jo.getString("LoanJsonList"));// 转账列表		mmmLoan.setLoanJsonList(LoanJsonListStr);		JSONArray loanListjson = JSON.parseArray(LoanJsonListStr);		List<LoanJson> loanList = new ArrayList<LoanJson>();// 转账列表		if (loanListjson != null) {// 如果转账列表不为空			for (int i = 0; i < loanListjson.size(); i++) {				JSONObject object = loanListjson.getJSONObject(i);				LoanJson loan = new LoanJson();// 转账列表类				loan.setLoanOutMoneymoremore(object.getString("LoanOutMoneymoremore"));// 付款人乾多多标识				loan.setLoanInMoneymoremore(object.getString("LoanInMoneymoremore"));// 收款人乾多多标识				loan.setLoanNo(object.getString("LoanNo"));// 乾多多流水号				loan.setOrderNo(object.getString("OrderNo"));// 网贷平台订单号				loan.setAmount(object.getString("Amount"));// 金额				loan.setBatchNo(object.getString("BatchNo"));// 网贷平台标号				loan.setTransferName(object.getString("TransferName"));// 用途				loan.setRemark(object.getString("Remark"));// 备注				JSONArray secondListjson = JSON.parseArray(object.getString("SecondaryJsonList"));				List<SecondaryJson> secondList = new ArrayList<SecondaryJson>();// 转账二次分配列表				if (secondListjson != null) {					for (int n = 0; n < secondListjson.size(); n++) {						JSONObject secondObject = loanListjson.getJSONObject(n);						SecondaryJson secondJson = new SecondaryJson();						secondJson.setLoanInMoneymoremore(secondObject.getString("LoanInMoneymoremore"));// 收款人乾多多标识						secondJson.setAmount(secondObject.getString("Amount"));// 金额						secondJson.setTransferName(secondObject.getString("TransferName"));// 用途						secondJson.setRemark(secondObject.getString("Remark"));// 备注						secondList.add(secondJson);					}					loan.setSecondaryList(secondList);				}				loanList.add(loan);			}		}		logger.info("loanList: " + JSON.toJSONString(loanList));		mmmLoan.setLoanList(loanList);		logger.info("signInfo: " + jo.getString("SignInfo").replace(" ", "+"));		mmmLoan.setSignInfo(jo.getString("SignInfo").replace(" ", "+"));// 签名参数		logger.info("投标回调解析参数完毕：" + mmmLoan.toString());		return mmmLoan;	}	// end	/**	 * 授权参数处理	 *	 * @return	 */	private MmmLoanAuthorize loanAuthorizeCall() {		logger.info("授权返回参数：" + getRequestParamsToJSON());		MmmLoanAuthorize mmm = new MmmLoanAuthorize(0);		mmm.setMoneymoremoreId(paramString("MoneymoremoreId"));		mmm.setPlatformMoneymoremore(paramString("PlatformMoneymoremore"));		mmm.setAuthorizeTypeOpen(paramString("AuthorizeTypeOpen"));		mmm.setAuthorizeTypeClose(paramString("AuthorizeTypeClose"));		mmm.setAuthorizeType(paramString("AuthorizeType"));		mmm.setResultCode(paramString("ResultCode"));		mmm.setSignInfo(paramString("SignInfo"));		mmm.setRemark1(paramString("Remark1"));		return mmm;	}	/**	 * 注册开户返回参数	 *	 * @return	 */	private MmmRegister registerCall() {		logger.info("注册开户返回参数：" + getRequestParamsToJSON());		MmmRegister mmmReg = new MmmRegister(1);		mmmReg.setAccountType(paramString("AccountType")); // add by gy 2016年11月15日11:49:27 增加实名开户的时候，accountTYpe参数，用以区分企业用户与普通用户		mmmReg.setAccountNumber(paramString("AccountNumber"));		mmmReg.setMobile(paramString("Mobile"));		mmmReg.setEmail(paramString("Email"));		mmmReg.setRealName(paramString("RealName"));		mmmReg.setIdentificationNo(paramString("IdentificationNo"));		mmmReg.setMoneymoremoreId(paramString("MoneymoremoreId"));		mmmReg.setLoanPlatformAccount(paramString("LoanPlatformAccount"));		mmmReg.setPlatformMoneymoremore(paramString("PlatformMoneymoremore"));		mmmReg.setResultCode(paramString("ResultCode"));		mmmReg.setAuthFee(paramString("AuthFee"));		mmmReg.setAuthState(paramString("AuthState"));		mmmReg.setSignInfo(paramString("SignInfo"));		return mmmReg;	}	/**	 * 开户补单返回参数	 *	 * @param jo	 * @return	 */	private MmmRegister registerCall(JSONObject jo) {		logger.info("开户补单装配参数：" + JSON.toJSONString(jo));		MmmRegister mmmReg = new MmmRegister(1);		mmmReg.setAccountType(jo.getString("AccountType"));		mmmReg.setAccountNumber(jo.getString("AccountNumber"));		mmmReg.setMobile(jo.getString("Mobile"));		mmmReg.setEmail(jo.getString("Email"));		mmmReg.setRealName(jo.getString("RealName"));		mmmReg.setIdentificationNo(jo.getString("IdentificationNo"));		mmmReg.setMoneymoremoreId(jo.getString("MoneymoremoreId"));		mmmReg.setLoanPlatformAccount(jo.getString("LoanPlatformAccount"));		mmmReg.setPlatformMoneymoremore(jo.getString("PlatformMoneymoremore"));		mmmReg.setResultCode(jo.getString("ResultCode"));		mmmReg.setAuthFee(jo.getString("AuthFee"));		mmmReg.setAuthState(jo.getString("AuthState"));		mmmReg.setSignInfo(jo.getString("SignInfo"));		return mmmReg;	}	/**	 * 充值返回参数	 *	 * @return	 */	private MmmRecharge rechargeCall() {		logger.info("充值返回参数：" + getRequestParamsToJSON());		MmmRecharge mmmRec = new MmmRecharge(2);		mmmRec.setRechargeMoneymoremore(paramString("RechargeMoneymoremore"));		mmmRec.setPlatformMoneymoremore(paramString("PlatformMoneymoremore"));		mmmRec.setLoanNo(paramString("LoanNo"));		mmmRec.setOrderNo(paramString("OrderNo"));		mmmRec.setAmount(paramString("Amount"));		mmmRec.setResultCode(paramString("ResultCode"));		mmmRec.setSignInfo(paramString("SignInfo"));		mmmRec.setRechargeType(paramString("RechargeType"));		mmmRec.setFeeType(paramString("FeeType"));		mmmRec.setFee(paramString("Fee"));		mmmRec.setFeePlatform(paramString("FeePlatform"));		mmmRec.setMessage(paramString("Message"));		return mmmRec;	}	/**	 * 充值补单返回参数	 *	 * @param jo	 * @return	 */	private MmmRecharge rechargeCall(JSONObject jo) {		logger.info("充值补单装配参数：" + JSON.toJSONString(jo));		MmmRecharge mmmRec = new MmmRecharge(2);		mmmRec.setRechargeMoneymoremore(jo.getString("RechargeMoneymoremore"));		mmmRec.setPlatformMoneymoremore(jo.getString("PlatformMoneymoremore"));		mmmRec.setLoanNo(jo.getString("LoanNo"));		mmmRec.setOrderNo(jo.getString("OrderNo"));		mmmRec.setAmount(jo.getString("Amount"));		mmmRec.setResultCode(jo.getString("ResultCode"));		mmmRec.setSignInfo(jo.getString("SignInfo"));		mmmRec.setRechargeType(jo.getString("RechargeType"));		mmmRec.setFeeType(jo.getString("FeeType"));		mmmRec.setFee(jo.getString("Fee"));		mmmRec.setFeePlatform(jo.getString("FeePlatform"));		mmmRec.setMessage(jo.getString("Message"));		return mmmRec;	}	/**	 * 取现返回参数	 *	 * @return	 */	private MmmCash cashCall() {		logger.info("提现返回参数：" + getRequestParamsToJSON());		MmmCash mmmCash = new MmmCash(0);		mmmCash.setWithdrawMoneymoremore(paramString("WithdrawMoneymoremore"));		mmmCash.setPlatformMoneymoremore(paramString("PlatformMoneymoremore"));		mmmCash.setLoanNo(paramString("LoanNo"));		mmmCash.setOrderNo(paramString("OrderNo"));		mmmCash.setAmount(paramString("Amount"));		mmmCash.setFeePercent(paramString("FeePercent"));		mmmCash.setFee(paramString("Fee"));		mmmCash.setFreeLimit(paramString("FreeLimit"));		mmmCash.setRandomTimeStamp(paramString("RandomTimeStamp"));		mmmCash.setRemark1(paramString("Remark1"));		mmmCash.setRemark2(paramString("Remark2"));		mmmCash.setRemark3(paramString("Remark3"));		mmmCash.setFeeMax(paramString("FeeMax"));		mmmCash.setFeeWithdraws(paramString("FeeWithdraws"));		mmmCash.setResultCode(paramString("ResultCode"));		mmmCash.setSignInfo(paramString("SignInfo"));		return mmmCash;	}	/**	 * 取现补单调用参数	 * add by gy 2016年11月15日11:50:05	 *	 * @param jo	 * @return	 */	private MmmCash cashCall(JSONObject jo) {		logger.info("提现补单装配参数：" + JSON.toJSONString(jo));		MmmCash mmmCash = new MmmCash(0);		mmmCash.setWithdrawMoneymoremore(jo.getString("WithdrawMoneymoremore"));		mmmCash.setPlatformMoneymoremore(jo.getString("PlatformMoneymoremore"));		mmmCash.setLoanNo(jo.getString("LoanNo"));		mmmCash.setOrderNo(jo.getString("OrderNo"));		mmmCash.setAmount(jo.getString("Amount"));		mmmCash.setFeePercent(jo.getString("FeePercent"));		mmmCash.setFee(jo.getString("Fee"));		mmmCash.setFreeLimit(jo.getString("FreeLimit"));		mmmCash.setRandomTimeStamp(jo.getString("RandomTimeStamp"));		mmmCash.setRemark1(jo.getString("Remark1"));		mmmCash.setRemark2(jo.getString("Remark2"));		mmmCash.setRemark3(jo.getString("Remark3"));		mmmCash.setFeeMax(jo.getString("FeeMax"));		mmmCash.setFeeWithdraws(jo.getString("FeeWithdraws"));		mmmCash.setResultCode(jo.getString("ResultCode"));		mmmCash.setSignInfo(jo.getString("SignInfo"));		return mmmCash;	}	// end	private void checkSign(MmmModel mmm, String type) {		boolean verifySignature = mmm.successSign();// RSA 数据签名验证 （TRUE:验证成功；FALSE:验证失败）		logger.info("验签结果：" + verifySignature);		if (!verifySignature) {			throw new BussinessException(MmmResultCode.getResult(mmm.getResultCode(), type), "/member/index.html");		}		// 开户验签		if (!StringUtils.isBlank(type) && type.equals("register")) {			if (!mmm.getResultCode().equals("88") && !mmm.getResultCode().equals("89")) {				throw new BussinessException(MmmResultCode.getResult(mmm.getResultCode(), type), "/member/index.html");			}		}		// 充值验签		if (!StringUtils.isBlank(type) && type.equals("recharge")) {			if (!mmm.getResultCode().equals("90") && !mmm.getResultCode().equals("88") && !mmm.getResultCode().equals("91")) {				throw new BussinessException(MmmResultCode.getResult(mmm.getResultCode(), type), "/member/index.html");			}		}		// 授权验签		if (!StringUtils.isBlank(type) && type.equals("loanAuthorize")) {			if (!mmm.getResultCode().equals("88")) {				throw new BussinessException(MmmResultCode.getResult(mmm.getResultCode(), type), "/member/index.html");			}		}		// 认证、提现银行卡绑定、代扣授权三合一接口验签		if (!StringUtils.isBlank(type) && type.equals("loanFastPay")) {			if (!mmm.getResultCode().equals("88")) {				throw new BussinessException(MmmResultCode.getResult(mmm.getResultCode(), type), "/member/index.html");			}		}		if (mmm.getResultCode().equals("90") || mmm.getResultCode().equals("88")) {		} else {			throw new BussinessException(MmmResultCode.getResult(mmm.getResultCode(), type), "/member/index.html");		}	}	/**	 * 回调参数拼接共用方法	 *	 * @return	 */	public String getRequestParams() {		String params = "";		try {			Enumeration e = request.getParameterNames();// 获取request中所有的参数、			while (e.hasMoreElements()) {				String parName = (String) e.nextElement();				String value = request.getParameter(parName);				params += parName + "=" + value + "&";			}		} catch (Exception e) {			logger.error(e);		}		return params;	}	/**	 * 回调参数拼接json字符串方法	 *	 * @return	 */	public JSONObject getRequestParamsToJSON() {		JSONObject jo = new JSONObject();		try {			Enumeration e = request.getParameterNames();// 获取request中所有的参数、			while (e.hasMoreElements()) {				String parName = (String) e.nextElement();				String value = request.getParameter(parName);				jo.put(parName, value);			}		} catch (Exception e) {			logger.error(e);		}		return jo;	}	/**	 * 回调打印信息	 */	private void printSuccess() {		try {			HttpServletResponse response = ServletActionContext.getResponse();			response.setContentType("text/html;charset=utf-8");			response.setCharacterEncoding("utf-8");			response.getWriter().write("SUCCESS");			response.getWriter().flush();			response.getWriter().close();		} catch (Exception e) {			e.printStackTrace();			logger.info("回调打印异常:" + e.getMessage());		}	}  }